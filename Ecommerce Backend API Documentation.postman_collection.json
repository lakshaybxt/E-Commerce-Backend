{
	"info": {
		"_postman_id": "1c8579e5-8098-44a6-af57-04cde13caf9c",
		"name": "Ecommerce Backend API Documentation",
		"description": "**Overview:**  \nThe **Ecommerce Backend API** provides a set of RESTful endpoints to manage products in an eCommerce application. This API allows users to perform CRUD operations on products, including viewing, adding, updating, deleting, and searching products. Additionally, the API supports image uploads for products and allows fetching images based on product IDs.\n\nThe backend is built using **Spring Boot** and supports interactions via HTTP requests. This documentation provides details of all the available endpoints along with their expected input parameters and responses.\n\n---\n\n### **Base URL:**\n\n`http://localhost:8080/api`\n\n---\n\n### **Endpoints:**\n\n#### 1\\. **Get All Products**\n\n- **Method:** GET\n    \n- **URL:** `/products`\n    \n- **Description:** Fetches all available products from the database.\n    \n- **Response:** A list of all products.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `500 Internal Server Error`\n    \n\n---\n\n#### 2\\. **Get Product by ID**\n\n- **Method:** GET\n    \n- **URL:** `/product/{prodId}`\n    \n- **Description:** Fetches a product by its ID.\n    \n- **URL Parameter:**\n    \n    - `prodId`: The ID of the product you want to retrieve.\n        \n- **Response:** A product object if found, or a 404 error if not found.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`\n    \n\n---\n\n#### 3\\. **Add New Product**\n\n- **Method:** POST\n    \n- **URL:** `/product`\n    \n- **Description:** Adds a new product to the database, including an optional image.\n    \n- **Body Parameters:**\n    \n    - `product`: JSON object containing product details (e.g., name, description, price).\n        \n    - `imageFile`: An image file to associate with the product.\n        \n- **Response:** The newly added product with a 201 status code, or an error message if the creation fails.\n    \n- **Success Status Code:** `201 Created`\n    \n- **Failure Status Code:** `500 Internal Server Error`\n    \n\n---\n\n#### 4\\. **Get Product Image by ID**\n\n- **Method:** GET\n    \n- **URL:** `/product/{prodId}/image`\n    \n- **Description:** Fetches the image associated with a product by its ID.\n    \n- **URL Parameter:**\n    \n    - `prodId`: The ID of the product whose image is being requested.\n        \n- **Response:** A byte array representing the image data.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`\n    \n\n---\n\n#### 5\\. **Update Product**\n\n- **Method:** PUT\n    \n- **URL:** `/product/{id}`\n    \n- **Description:** Updates an existing product's details and image.\n    \n- **URL Parameter:**\n    \n    - `id`: The ID of the product you want to update.\n        \n- **Body Parameters:**\n    \n    - `product`: JSON object containing updated product details (e.g., name, description, price).\n        \n    - `imageFile`: An image file to replace the existing product image.\n        \n- **Response:** A success message or an error message if the update fails.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `400 Bad Request`\n    \n\n---\n\n#### 6\\. **Delete Product**\n\n- **Method:** DELETE\n    \n- **URL:** `/product/{id}`\n    \n- **Description:** Deletes a product from the database by its ID.\n    \n- **URL Parameter:**\n    \n    - `id`: The ID of the product to delete.\n        \n- **Response:** A success message if the product is deleted, or an error message if not found.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`\n    \n\n---\n\n#### 7\\. **Search Products**\n\n- **Method:** GET\n    \n- **URL:** `/products/search`\n    \n- **Description:** Searches for products based on a given keyword.\n    \n- **Query Parameter:**\n    \n    - `keyword`: The search term to filter products by.\n        \n- **Response:** A list of products matching the search term.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `400 Bad Request`\n    \n\n---\n\n### **Authentication:**\n\nThis API does not require authentication for the listed operations. However, authentication mechanisms (like JWT tokens) can be added if necessary for future enhancements.\n\n---\n\n### **Error Codes:**\n\n- **200 OK**: The request was successful.\n    \n- **400 Bad Request**: The request was malformed or missing required parameters.\n    \n- **404 Not Found**: The requested resource (e.g., product) was not found.\n    \n- **500 Internal Server Error**: A server error occurred while processing the request.\n    \n\n---\n\n### **Conclusion:**\n\nThis API is designed to help you manage products effectively in an eCommerce application. With the ability to perform CRUD operations and handle product images, it is built to be scalable for future needs. Feel free to test the endpoints and customize them based on your requirements.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44336807"
	},
	"item": [
		{
			"name": "Get All Products",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				},
				"description": "- **Method:** GET\n    \n- **URL:** `/products`\n    \n- **Description:** Fetches all available products from the database.\n    \n- **Response:** A list of all products.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `500 Internal Server Error`"
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/product/:prodId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"product",
						":prodId"
					],
					"variable": [
						{
							"key": "prodId"
						}
					]
				},
				"description": "- **Method:** GET\n    \n- **URL:** `/product/{prodId}`\n    \n- **Description:** Fetches a product by its ID.\n    \n- **URL Parameter:**\n    \n    - `prodId`: The ID of the product you want to retrieve.\n        \n- **Response:** A product object if found, or a 404 error if not found.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`"
			},
			"response": []
		},
		{
			"name": "Add New Product",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "product",
							"value": "{\"name\": \"New Product\", \"description\": \"New product description\", \"price\": 250.00}",
							"type": "text"
						},
						{
							"key": "imageFile",
							"type": "file",
							"src": "path/to/product-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/product",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"product"
					]
				},
				"description": "- **Method:** POST\n    \n- **URL:** `/product`\n    \n- **Description:** Adds a new product to the database, including an optional image.\n    \n- **Body Parameters:**\n    \n    - `product`: JSON object containing product details (e.g., name, description, price).\n        \n    - `imageFile`: An image file to associate with the product.\n        \n- **Response:** The newly added product with a 201 status code, or an error message if the creation fails.\n    \n- **Success Status Code:** `201 Created`\n    \n- **Failure Status Code:** `500 Internal Server Error`"
			},
			"response": []
		},
		{
			"name": "Get Product Image by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/product/:prodId/image",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"product",
						":prodId",
						"image"
					],
					"variable": [
						{
							"key": "prodId"
						}
					]
				},
				"description": "- **Method:** GET\n    \n- **URL:** `/product/{prodId}/image`\n    \n- **Description:** Fetches the image associated with a product by its ID.\n    \n- **URL Parameter:**\n    \n    - `prodId`: The ID of the product whose image is being requested.\n        \n- **Response:** A byte array representing the image data.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`"
			},
			"response": []
		},
		{
			"name": "Update Product",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "product",
							"value": "{\"name\": \"Updated Product\", \"description\": \"Updated description\", \"price\": 300.00}",
							"type": "text"
						},
						{
							"key": "imageFile",
							"type": "file",
							"src": "path/to/updated-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/product/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"product",
						":id"
					],
					"variable": [
						{
							"key": "id"
						}
					]
				},
				"description": "- **Method:** PUT\n    \n- **URL:** `/product/{id}`\n    \n- **Description:** Updates an existing product's details and image.\n    \n- **URL Parameter:**\n    \n    - `id`: The ID of the product you want to update.\n        \n- **Body Parameters:**\n    \n    - `product`: JSON object containing updated product details (e.g., name, description, price).\n        \n    - `imageFile`: An image file to replace the existing product image.\n        \n- **Response:** A success message or an error message if the update fails.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `400 Bad Request`"
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/product/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"product",
						":id"
					],
					"variable": [
						{
							"key": "id"
						}
					]
				},
				"description": "- **Method:** DELETE\n    \n- **URL:** `/product/{id}`\n    \n- **Description:** Deletes a product from the database by its ID.\n    \n- **URL Parameter:**\n    \n    - `id`: The ID of the product to delete.\n        \n- **Response:** A success message if the product is deleted, or an error message if not found.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `404 Not Found`"
			},
			"response": []
		},
		{
			"name": "Search Products",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/search?keyword={{keyword}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"search"
					],
					"query": [
						{
							"key": "keyword",
							"value": "{{keyword}}"
						}
					]
				},
				"description": "StartFragment\n\n- **Method:** GET\n    \n- **URL:** `/products/search`\n    \n- **Description:** Searches for products based on a given keyword.\n    \n- **Query Parameter:**\n    \n    - `keyword`: The search term to filter products by.\n        \n- **Response:** A list of products matching the search term.\n    \n- **Success Status Code:** `200 OK`\n    \n- **Failure Status Code:** `400 Bad Request`\n    \n\nEndFragment"
			},
			"response": []
		}
	]
}